# --- Rule management stubs ---
def update_rules():
    """Update YARA rules from a central repository or location."""
    print_result("[Rule Management] Updating YARA rules...", "info")
    # Example: git pull or copy from central repo
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    try:
        if os.path.isdir(rules_dir) and os.path.isdir(os.path.join(rules_dir, ".git")):
            subprocess.run(["git", "-C", rules_dir, "pull"], check=True)
            print_result("[Rule Management] Rules updated from git.", "success")
        else:
            print_result(f"[Rule Management] No git repo found in {rules_dir}. Please update rules manually.", "error")
    except Exception as e:
        print_result(f"[Rule Management] Update failed: {e}", "error")

def validate_rules():
    """Validate all YARA rules for syntax errors."""
    print_result("[Rule Management] Validating all YARA rules...", "info")
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    import yara
    for rule_file in os.listdir(rules_dir):
        if rule_file.endswith(".yar"):
            path = os.path.join(rules_dir, rule_file)
            try:
                yara.compile(filepath=path)
                print_result(f"[Rule Management] {rule_file}: OK", "success")
            except Exception as e:
                print_result(f"[Rule Management] {rule_file}: {e}", "error")


# --- Core dependencies ---
import os
import sys
import time
import subprocess

# --- Internal modules ---
from malware_scanner.core import scan_with_yara
from malware_scanner.virus_total import virustotal_scan
from malware_scanner.metadata_extractor import extract_metadata
from malware_scanner.utils import print_result
from malware_scanner.dependency_check import check_all_dependencies

def ensure_root():
    """Ensure the program runs as root (Linux/macOS only)."""
    if os.name != 'nt':
        if hasattr(os, 'geteuid') and os.geteuid() != 0:
            print_result("This tool must be run as root or superuser!", "error")
            sys.exit(1)

def menu():
    print_result("\n=== malyz3r: Advanced Malware Scanner ===", "info")
    print_result("[1] Scan a file with YARA rules", "info")
    print_result("[2] Scan with VirusTotal", "info")
    print_result("[3] Extract metadata from file (with ExifTool option)", "info")
    print_result("[4] Scan all running processes' memory with YARA", "info")
    print_result("[5] Monitor logs in real time", "info")
    print_result("[6] Investigate suspicious files", "info")
    print_result("[7] Manage YARA rules", "info")
    print_result("[8] Exit", "info")

def tail_log(log_file, lines=20):
    try:
        with open(log_file, 'r') as f:
            content = f.readlines()[-lines:]
            for line in content:
                print(line, end='')
        print_result(f"\n[Log Monitor] Showing last {lines} lines. Press Ctrl+C to stop.", "info", log=False)
        with open(log_file, 'r') as f:
            f.seek(0, 2)
            while True:
                line = f.readline()
                if not line:
                    time.sleep(0.5)
                    continue
                print(line, end='')
    except KeyboardInterrupt:
        print_result("[Log Monitor] Stopped.", "info", log=False)
    except Exception as e:
        print_result(f"[Log Monitor] Error: {e}", "error")

def rule_mgmt_menu():
    print_result("[Rule Management] Options:", "info")
    print_result("[1] Update rules from central repo", "info")
    print_result("[2] Validate all rules", "info")
    print_result("[3] Redeploy rules to endpoints (manual)", "info")
    print_result("[4] Fetch/Update YARA-Rules from GitHub (comprehensive)", "info")
    sub_choice = input("Select option (1-4): ").strip()
    if sub_choice == "1":
        update_rules()
    elif sub_choice == "2":
        validate_rules()
    elif sub_choice == "3":
        redeploy_rules()
    elif sub_choice == "4":
        fetch_yararules_repo()
    else:
        print_result("Invalid rule management option.", "error")
# --- YARA-Rules GitHub Integration ---
import subprocess
import os
import sys
import shutil

def fetch_yararules_repo():
    """Fetch or update the official YARA-Rules repository and set as rules dir."""
    repo_url = "https://github.com/Yara-Rules/rules.git"
    dest_dir = os.path.join(os.path.dirname(__file__), "yararules_official")
    rules_dir = os.path.join(dest_dir, "rules")
    try:
        if not os.path.exists(dest_dir):
            print_result(f"[YARA-Rules] Cloning {repo_url}...", "info")
            subprocess.run(["git", "clone", repo_url, dest_dir], check=True)
        else:
            print_result("[YARA-Rules] Updating existing repo...", "info")
            subprocess.run(["git", "-C", dest_dir, "pull"], check=True)
        # Set as active rules dir in config
        from malware_scanner.config import save_config, load_config
        config = load_config()
        config["rules_dir"] = rules_dir
        save_config(config)
        print_result(f"[YARA-Rules] Now using rules from: {rules_dir}", "success")
    except Exception as e:
        print_result(f"[YARA-Rules] Failed to fetch/update: {e}", "error")

def investigate_file(file_path):
    print_result(f"[Investigation] File: {file_path}", "info")
    # Show file info
    try:
        print_result(f"Size: {os.path.getsize(file_path)} bytes", "info", log=False)
    except Exception:
        pass
    # Run strings
    try:
        print_result("\n--- STRINGS ---", "info", log=False)
        result = subprocess.run(["strings", file_path], capture_output=True, text=True)
        print(result.stdout)
    except Exception:
        print_result("[Investigation] 'strings' not available.", "error", log=False)
    # Run hexdump
    try:
        print_result("\n--- HEXDUMP (first 256 bytes) ---", "info", log=False)
        result = subprocess.run(["hexdump", "-C", file_path], capture_output=True, text=True)
        print('\n'.join(result.stdout.splitlines()[:16]))
    except Exception:
        print_result("[Investigation] 'hexdump' not available.", "error", log=False)
    print_result("[Investigation] For deeper analysis, consider sandboxing this file.", "danger", log=False)

def update_rules():
    """Update YARA rules from a central repository or location."""
    print_result("[Rule Management] Updating YARA rules...", "info")
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    try:
        if os.path.isdir(rules_dir) and os.path.isdir(os.path.join(rules_dir, ".git")):
            subprocess.run(["git", "-C", rules_dir, "pull"], check=True)
            print_result("[Rule Management] Rules updated from git.", "success")
        else:
            print_result(f"[Rule Management] No git repo found in {rules_dir}. Please update rules manually.", "error")
    except Exception as e:
        print_result(f"[Rule Management] Update failed: {e}", "error")

def validate_rules():
    """Validate all YARA rules for syntax errors."""
    print_result("[Rule Management] Validating all YARA rules...", "info")
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    import yara
    for rule_file in os.listdir(rules_dir):
        if rule_file.endswith(".yar"):
            path = os.path.join(rules_dir, rule_file)
            try:
                yara.compile(filepath=path)
                print_result(f"[Rule Management] {rule_file}: OK", "success")
            except Exception as e:
                print_result(f"[Rule Management] {rule_file}: {e}", "error")


# --- Core dependencies ---
import os
import sys
import time
import subprocess

# --- Internal modules ---
from malware_scanner.core import scan_with_yara
from malware_scanner.virus_total import virustotal_scan
from malware_scanner.metadata_extractor import extract_metadata
from malware_scanner.utils import print_result
from malware_scanner.dependency_check import check_all_dependencies

def ensure_root():
    """Ensure the program runs as root (Linux/macOS only)."""
    if os.name != 'nt':
        if hasattr(os, 'geteuid') and os.geteuid() != 0:
            print_result("This tool must be run as root or superuser!", "error")
            sys.exit(1)

def menu():
    print_result("\n=== malyz3r: Advanced Malware Scanner ===", "info")
    print_result("[1] Scan a file with YARA rules", "info")
    print_result("[2] Scan with VirusTotal", "info")
    print_result("[3] Extract metadata from file (with ExifTool option)", "info")
    print_result("[4] Monitor logs in real time", "info")
    print_result("[5] Investigate suspicious files", "info")
    print_result("[6] Manage YARA rules", "info")
    print_result("[7] Exit", "info")

def tail_log(log_file, lines=20):
    try:
        with open(log_file, 'r') as f:
            content = f.readlines()[-lines:]
            for line in content:
                print(line, end='')
        print_result(f"\n[Log Monitor] Showing last {lines} lines. Press Ctrl+C to stop.", "info", log=False)
        with open(log_file, 'r') as f:
            f.seek(0, 2)
            while True:
                line = f.readline()
                if not line:
                    time.sleep(0.5)
                    continue
                print(line, end='')
    except KeyboardInterrupt:
        print_result("[Log Monitor] Stopped.", "info", log=False)
    except Exception as e:
        print_result(f"[Log Monitor] Error: {e}", "error")

def rule_mgmt_menu():
    print_result("[Rule Management] Options:", "info")
    print_result("[1] Update rules from central repo", "info")
    print_result("[2] Validate all rules", "info")
    print_result("[3] Redeploy rules to endpoints (manual)", "info")
    sub_choice = input("Select option (1-3): ").strip()
    if sub_choice == "1":
        update_rules()
    elif sub_choice == "2":
        validate_rules()
    elif sub_choice == "3":
        redeploy_rules()
    else:
        print_result("Invalid rule management option.", "error")

def investigate_file(file_path):
    print_result(f"[Investigation] File: {file_path}", "info")
    # Show file info
    try:
        print_result(f"Size: {os.path.getsize(file_path)} bytes", "info", log=False)
    except Exception:
        pass
    # Run strings
    try:
        print_result("\n--- STRINGS ---", "info", log=False)
        result = subprocess.run(["strings", file_path], capture_output=True, text=True)
        print(result.stdout)
    except Exception:
        print_result("[Investigation] 'strings' not available.", "error", log=False)
    # Run hexdump
    try:
        print_result("\n--- HEXDUMP (first 256 bytes) ---", "info", log=False)
        result = subprocess.run(["hexdump", "-C", file_path], capture_output=True, text=True)
        print('\n'.join(result.stdout.splitlines()[:16]))
    except Exception:
        print_result("[Investigation] 'hexdump' not available.", "error", log=False)
    print_result("[Investigation] For deeper analysis, consider sandboxing this file.", "danger", log=False)

def update_rules():
    """Update YARA rules from a central repository or location."""
    print_result("[Rule Management] Updating YARA rules...", "info")
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    try:
        if os.path.isdir(rules_dir) and os.path.isdir(os.path.join(rules_dir, ".git")):
            subprocess.run(["git", "-C", rules_dir, "pull"], check=True)
            print_result("[Rule Management] Rules updated from git.", "success")
        else:
            print_result(f"[Rule Management] No git repo found in {rules_dir}. Please update rules manually.", "error")
    except Exception as e:
        print_result(f"[Rule Management] Update failed: {e}", "error")

def validate_rules():
    """Validate all YARA rules for syntax errors."""
    print_result("[Rule Management] Validating all YARA rules...", "info")
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    import yara
    for rule_file in os.listdir(rules_dir):
        if rule_file.endswith(".yar"):
            path = os.path.join(rules_dir, rule_file)
            try:
                yara.compile(filepath=path)
                print_result(f"[Rule Management] {rule_file}: OK", "success")
            except Exception as e:
                print_result(f"[Rule Management] {rule_file}: {e}", "error")


# --- Core dependencies ---
import os
import sys
import time
import subprocess

# --- Internal modules ---
from malware_scanner.core import scan_with_yara
from malware_scanner.virus_total import virustotal_scan
from malware_scanner.metadata_extractor import extract_metadata
from malware_scanner.utils import print_result
from malware_scanner.dependency_check import check_all_dependencies

def ensure_root():
    """Ensure the program runs as root (Linux/macOS only)."""
    if os.name != 'nt':
        if hasattr(os, 'geteuid') and os.geteuid() != 0:
            print_result("This tool must be run as root or superuser!", "error")
            sys.exit(1)

def menu():
    print_result("\n=== malyz3r: Advanced Malware Scanner ===", "info")
    print_result("[1] Scan a file with YARA rules", "info")
    print_result("[2] Scan with VirusTotal", "info")
    print_result("[3] Extract metadata from file (with ExifTool option)", "info")
    print_result("[4] Monitor logs in real time", "info")
    print_result("[5] Investigate suspicious files", "info")
    print_result("[6] Manage YARA rules", "info")
    print_result("[7] Exit", "info")

def tail_log(log_file, lines=20):
    try:
        with open(log_file, 'r') as f:
            content = f.readlines()[-lines:]
            for line in content:
                print(line, end='')
        print_result(f"\n[Log Monitor] Showing last {lines} lines. Press Ctrl+C to stop.", "info", log=False)
        with open(log_file, 'r') as f:
            f.seek(0, 2)
            while True:
                line = f.readline()
                if not line:
                    time.sleep(0.5)
                    continue
                print(line, end='')
    except KeyboardInterrupt:
        print_result("[Log Monitor] Stopped.", "info", log=False)
    except Exception as e:
        print_result(f"[Log Monitor] Error: {e}", "error")

def rule_mgmt_menu():
    print_result("[Rule Management] Options:", "info")
    print_result("[1] Update rules from central repo", "info")
    print_result("[2] Validate all rules", "info")
    print_result("[3] Redeploy rules to endpoints (manual)", "info")
    sub_choice = input("Select option (1-3): ").strip()
    if sub_choice == "1":
        update_rules()
    elif sub_choice == "2":
        validate_rules()
    elif sub_choice == "3":
        redeploy_rules()
    else:
        print_result("Invalid rule management option.", "error")

def investigate_file(file_path):
    print_result(f"[Investigation] File: {file_path}", "info")
    # Show file info
    try:
        print_result(f"Size: {os.path.getsize(file_path)} bytes", "info", log=False)
    except Exception:
        pass
    # Run strings
    try:
        print_result("\n--- STRINGS ---", "info", log=False)
        result = subprocess.run(["strings", file_path], capture_output=True, text=True)
        print(result.stdout)
    except Exception:
        print_result("[Investigation] 'strings' not available.", "error", log=False)
    # Run hexdump
    try:
        print_result("\n--- HEXDUMP (first 256 bytes) ---", "info", log=False)
        result = subprocess.run(["hexdump", "-C", file_path], capture_output=True, text=True)
        print('\n'.join(result.stdout.splitlines()[:16]))
    except Exception:
        print_result("[Investigation] 'hexdump' not available.", "error", log=False)
    print_result("[Investigation] For deeper analysis, consider sandboxing this file.", "danger", log=False)

def update_rules():
    """Update YARA rules from a central repository or location."""
    print_result("[Rule Management] Updating YARA rules...", "info")
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    try:
        if os.path.isdir(rules_dir) and os.path.isdir(os.path.join(rules_dir, ".git")):
            subprocess.run(["git", "-C", rules_dir, "pull"], check=True)
            print_result("[Rule Management] Rules updated from git.", "success")
        else:
            print_result(f"[Rule Management] No git repo found in {rules_dir}. Please update rules manually.", "error")
    except Exception as e:
        print_result(f"[Rule Management] Update failed: {e}", "error")

def validate_rules():
    """Validate all YARA rules for syntax errors."""
    print_result("[Rule Management] Validating all YARA rules...", "info")
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    import yara
    for rule_file in os.listdir(rules_dir):
        if rule_file.endswith(".yar"):
            path = os.path.join(rules_dir, rule_file)
            try:
                yara.compile(filepath=path)
                print_result(f"[Rule Management] {rule_file}: OK", "success")
            except Exception as e:
                print_result(f"[Rule Management] {rule_file}: {e}", "error")


# --- Core dependencies ---
import os
import sys
import time
import subprocess

# --- Internal modules ---
from malware_scanner.core import scan_with_yara
from malware_scanner.virus_total import virustotal_scan
from malware_scanner.metadata_extractor import extract_metadata
from malware_scanner.utils import print_result
from malware_scanner.dependency_check import check_all_dependencies

def ensure_root():
    """Ensure the program runs as root (Linux/macOS only)."""
    if os.name != 'nt':
        if hasattr(os, 'geteuid') and os.geteuid() != 0:
            print_result("This tool must be run as root or superuser!", "error")
            sys.exit(1)

def menu():
    print_result("\n=== malyz3r: Advanced Malware Scanner ===", "info")
    print_result("[1] Scan a file with YARA rules", "info")
    print_result("[2] Scan with VirusTotal", "info")
    print_result("[3] Extract metadata from file (with ExifTool option)", "info")
    print_result("[4] Monitor logs in real time", "info")
    print_result("[5] Investigate suspicious files", "info")
    print_result("[6] Manage YARA rules", "info")
    print_result("[7] Exit", "info")

def tail_log(log_file, lines=20):
    try:
        with open(log_file, 'r') as f:
            content = f.readlines()[-lines:]
            for line in content:
                print(line, end='')
        print_result(f"\n[Log Monitor] Showing last {lines} lines. Press Ctrl+C to stop.", "info", log=False)
        with open(log_file, 'r') as f:
            f.seek(0, 2)
            while True:
                line = f.readline()
                if not line:
                    time.sleep(0.5)
                    continue
                print(line, end='')
    except KeyboardInterrupt:
        print_result("[Log Monitor] Stopped.", "info", log=False)
    except Exception as e:
        print_result(f"[Log Monitor] Error: {e}", "error")

def rule_mgmt_menu():
    print_result("[Rule Management] Options:", "info")
    print_result("[1] Update rules from central repo", "info")
    print_result("[2] Validate all rules", "info")
    print_result("[3] Redeploy rules to endpoints (manual)", "info")
    sub_choice = input("Select option (1-3): ").strip()
    if sub_choice == "1":
        update_rules()
    elif sub_choice == "2":
        validate_rules()
    elif sub_choice == "3":
        redeploy_rules()
    else:
        print_result("Invalid rule management option.", "error")

def investigate_file(file_path):
    print_result(f"[Investigation] File: {file_path}", "info")
    # Show file info
    try:
        print_result(f"Size: {os.path.getsize(file_path)} bytes", "info", log=False)
    except Exception:
        pass
    # Run strings
    try:
        print_result("\n--- STRINGS ---", "info", log=False)
        result = subprocess.run(["strings", file_path], capture_output=True, text=True)
        print(result.stdout)
    except Exception:
        print_result("[Investigation] 'strings' not available.", "error", log=False)
    # Run hexdump
    try:
        print_result("\n--- HEXDUMP (first 256 bytes) ---", "info", log=False)
        result = subprocess.run(["hexdump", "-C", file_path], capture_output=True, text=True)
        print('\n'.join(result.stdout.splitlines()[:16]))
    except Exception:
        print_result("[Investigation] 'hexdump' not available.", "error", log=False)
    print_result("[Investigation] For deeper analysis, consider sandboxing this file.", "danger", log=False)

def update_rules():
    """Update YARA rules from a central repository or location."""
    print_result("[Rule Management] Updating YARA rules...", "info")
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    try:
        if os.path.isdir(rules_dir) and os.path.isdir(os.path.join(rules_dir, ".git")):
            subprocess.run(["git", "-C", rules_dir, "pull"], check=True)
            print_result("[Rule Management] Rules updated from git.", "success")
        else:
            print_result(f"[Rule Management] No git repo found in {rules_dir}. Please update rules manually.", "error")
    except Exception as e:
        print_result(f"[Rule Management] Update failed: {e}", "error")

def validate_rules():
    """Validate all YARA rules for syntax errors."""
    print_result("[Rule Management] Validating all YARA rules...", "info")
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    import yara
    for rule_file in os.listdir(rules_dir):
        if rule_file.endswith(".yar"):
            path = os.path.join(rules_dir, rule_file)
            try:
                yara.compile(filepath=path)
                print_result(f"[Rule Management] {rule_file}: OK", "success")
            except Exception as e:
                print_result(f"[Rule Management] {rule_file}: {e}", "error")

def redeploy_rules():
    """Stub for redeploying rules to endpoints (manual step)."""
    print_result("[Rule Management] Redeploying rules to endpoints (manual step)", "info")
    print_result("Copy updated rules to all endpoints or use git pull on each.", "info")

def main():
    ensure_root()
    missing_bin, missing_pkg = check_all_dependencies()
    if missing_bin or missing_pkg:
        print_result("Some features may be disabled due to missing dependencies.", "error")
    log_file = os.environ.get("MALYZ3R_LOG_FILE", "malyz3r.log")
    while True:
        menu()
        try:
            choice = input("Enter your choice (1-7): ").strip()
        except (EOFError, KeyboardInterrupt):
            print_result("Exiting...", "info")
            break
        if choice == "1":
            if 'yara' in missing_pkg:
                print_result("YARA Python package is missing. File scan unavailable.", "error")
            else:
                file_path = input("[File Scan] Enter file path: ").strip()
                scan_with_yara(file_path)
        elif choice == "2":
            file_path = input("[VirusTotal] Enter file path: ").strip()
            api_key = os.environ.get("MALYZ3R_VT_API_KEY")
            virustotal_scan(file_path, api_key)
        elif choice == "3":
            file_path = input("[Metadata] Enter file path: ").strip()
            use_exif = input("Use ExifTool if available? (y/n): ").strip().lower() == "y"
            extract_metadata(file_path, use_exif)
        elif choice == "4":
            from malware_scanner.core import scan_memory_with_yara
            scan_memory_with_yara()
        elif choice == "5":
            tail_log(log_file)
        elif choice == "6":
            if 'strings' in missing_bin:
                print_result("'strings' utility is missing. Investigation unavailable.", "error")
            else:
                file_path = input("[Investigation] Enter file path: ").strip()
                investigate_file(file_path)
        elif choice == "7":
            rule_mgmt_menu()
        elif choice == "8":
            print_result("Exiting...", "info")
            break
        else:
            print_result("Invalid choice! Please enter a number between 1 and 8.", "error")
        time.sleep(0.5)
import os
import sys
import time
import subprocess

# --- Internal modules ---
from malware_scanner.core import scan_with_yara
from malware_scanner.virus_total import virustotal_scan
from malware_scanner.metadata_extractor import extract_metadata
from malware_scanner.utils import print_result
from malware_scanner.dependency_check import check_all_dependencies

def ensure_root():
    """Ensure the program runs as root (Linux/macOS only)."""
    if os.name != 'nt':
        if hasattr(os, 'geteuid') and os.geteuid() != 0:
            print_result("This tool must be run as root or superuser!", "error")
            sys.exit(1)

def menu():
    print_result("\n=== malyz3r: Advanced Malware Scanner ===", "info")
    print_result("[1] Scan a file with YARA rules", "info")
    print_result("[2] Scan with VirusTotal", "info")
    print_result("[3] Extract metadata from file (with ExifTool option)", "info")
    print_result("[4] Monitor logs in real time", "info")
    print_result("[5] Investigate suspicious files", "info")
    print_result("[6] Manage YARA rules", "info")
    print_result("[7] Exit", "info")

def tail_log(log_file, lines=20):
    try:
        with open(log_file, 'r') as f:
            content = f.readlines()[-lines:]
            for line in content:
                print(line, end='')
        print_result(f"\n[Log Monitor] Showing last {lines} lines. Press Ctrl+C to stop.", "info", log=False)
        with open(log_file, 'r') as f:
            f.seek(0, 2)
            while True:
                line = f.readline()
                if not line:
                    time.sleep(0.5)
                    continue
                print(line, end='')
    except KeyboardInterrupt:
        print_result("[Log Monitor] Stopped.", "info", log=False)
    except Exception as e:
        print_result(f"[Log Monitor] Error: {e}", "error")

def rule_mgmt_menu():
    print_result("[Rule Management] Options:", "info")
    print_result("[1] Update rules from central repo", "info")
    print_result("[2] Validate all rules", "info")
    print_result("[3] Redeploy rules to endpoints (manual)", "info")
    sub_choice = input("Select option (1-3): ").strip()
    if sub_choice == "1":
        update_rules()
    elif sub_choice == "2":
        validate_rules()
    elif sub_choice == "3":
        redeploy_rules()
    else:
        print_result("Invalid rule management option.", "error")

def investigate_file(file_path):
    print_result(f"[Investigation] File: {file_path}", "info")
    # Show file info
    try:
        print_result(f"Size: {os.path.getsize(file_path)} bytes", "info", log=False)
    except Exception:
        pass
    # Run strings
    try:
        print_result("\n--- STRINGS ---", "info", log=False)
        result = subprocess.run(["strings", file_path], capture_output=True, text=True)
        print(result.stdout)
    except Exception:
        print_result("[Investigation] 'strings' not available.", "error", log=False)
    # Run hexdump
    try:
        print_result("\n--- HEXDUMP (first 256 bytes) ---", "info", log=False)
        result = subprocess.run(["hexdump", "-C", file_path], capture_output=True, text=True)
        print('\n'.join(result.stdout.splitlines()[:16]))
    except Exception:
        print_result("[Investigation] 'hexdump' not available.", "error", log=False)
    print_result("[Investigation] For deeper analysis, consider sandboxing this file.", "danger", log=False)
