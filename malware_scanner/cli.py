
import os
import sys
import time
from malware_scanner.core import scan_with_yara
from malware_scanner.virus_total import virustotal_scan
from malware_scanner.metadata_extractor import extract_metadata
from malware_scanner.utils import print_result

def ensure_root():
    """Ensure the program runs as root."""
    if os.name != 'nt':  # Skip for Windows
        if os.geteuid() != 0:
            print_result("This tool must be run as root or superuser!", "error")
            sys.exit(1)

def ensure_root():
    """Ensure the program runs as root."""
    if os.name != 'nt':  # Skip for Windows
        if os.geteuid() != 0:
            print_result("This tool must be run as root or superuser!", "error")
            sys.exit(1)

def menu():
    print_result("\n=== malyz3r: Advanced Malware Scanner ===", "info")
    print_result("[1] Scan a file with YARA rules", "info")
    print_result("[2] Scan with VirusTotal", "info")
    print_result("[3] Extract metadata from file (with ExifTool option)", "info")
    print_result("[4] Monitor logs in real time", "info")
    print_result("[5] Investigate suspicious files", "info")
    print_result("[6] Manage YARA rules", "info")
    print_result("[7] Exit", "info")




import subprocess

def tail_log(log_file, lines=20):
    try:
        with open(log_file, 'r') as f:
            content = f.readlines()[-lines:]
            for line in content:
                print(line, end='')
        print_result(f"\n[Log Monitor] Showing last {lines} lines. Press Ctrl+C to stop.", "info", log=False)
        with open(log_file, 'r') as f:
            f.seek(0, 2)
            while True:
                line = f.readline()
                if not line:
                    time.sleep(0.5)
                    continue
                print(line, end='')
    except KeyboardInterrupt:
        print_result("[Log Monitor] Stopped.", "info", log=False)
    except Exception as e:
        print_result(f"[Log Monitor] Error: {e}", "error")

def investigate_file(file_path):
    print_result(f"[Investigation] File: {file_path}", "info")
    # Show file info
    try:
        print_result(f"Size: {os.path.getsize(file_path)} bytes", "info", log=False)
    except Exception:
        pass
    # Run strings
    try:
        print_result("\n--- STRINGS ---", "info", log=False)
        result = subprocess.run(["strings", file_path], capture_output=True, text=True)
        print(result.stdout)
    except Exception:
        print_result("[Investigation] 'strings' not available.", "error", log=False)
    # Run hexdump
    try:
        print_result("\n--- HEXDUMP (first 256 bytes) ---", "info", log=False)
        result = subprocess.run(["hexdump", "-C", file_path], capture_output=True, text=True)
        print('\n'.join(result.stdout.splitlines()[:16]))
    except Exception:
        print_result("[Investigation] 'hexdump' not available.", "error", log=False)
    print_result("[Investigation] For deeper analysis, consider sandboxing this file.", "danger", log=False)


def update_rules():
    print_result("[Rule Management] Updating YARA rules...", "info")
    # Example: git pull or copy from central repo
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    try:
        if os.path.isdir(rules_dir) and os.path.isdir(os.path.join(rules_dir, ".git")):
            subprocess.run(["git", "-C", rules_dir, "pull"], check=True)
            print_result("[Rule Management] Rules updated from git.", "success")
        else:
            print_result(f"[Rule Management] No git repo found in {rules_dir}. Please update rules manually.", "error")
    except Exception as e:
        print_result(f"[Rule Management] Update failed: {e}", "error")

def validate_rules():
    print_result("[Rule Management] Validating all YARA rules...", "info")
    rules_dir = "/etc/yara-rules" if os.path.isdir("/etc/yara-rules") else os.path.join(os.path.dirname(__file__), "rules")
    import yara
    for rule_file in os.listdir(rules_dir):
        if rule_file.endswith(".yar"):
            path = os.path.join(rules_dir, rule_file)
            try:
                yara.compile(filepath=path)
                print_result(f"[Rule Management] {rule_file}: OK", "success")
            except Exception as e:
                print_result(f"[Rule Management] {rule_file}: {e}", "error")

def redeploy_rules():
    print_result("[Rule Management] Redeploying rules to endpoints (manual step)", "info")
    print_result("Copy updated rules to all endpoints or use git pull on each.", "info")

def main():
    ensure_root()
    log_file = os.environ.get("MALYZ3R_LOG_FILE", "malyz3r.log")
    while True:
        menu()
        choice = input("\nEnter your choice (1-7): ").strip()

        if choice == "1":
            file_path = input("\n[File Scan] Enter file path: ").strip()
            if not file_path:
                print_result("[File Scan] No file path provided. Please try again.", "error")
                continue
            if not os.path.isfile(file_path):
                print_result(f"[File Scan] File not found: {file_path}", "error")
                continue
            scan_with_yara(file_path)
        elif choice == "2":
            file_path = input("\n[VirusTotal] Enter file path: ").strip()
            if not file_path:
                print_result("[VirusTotal] No file path provided. Please try again.", "error")
                continue
            if not os.path.isfile(file_path):
                print_result(f"[VirusTotal] File not found: {file_path}", "error")
                continue
            api_key = input("[VirusTotal] Enter your VirusTotal API Key: ").strip()
            if not api_key:
                print_result("[VirusTotal] No API key provided. Please try again.", "error")
                continue
            virustotal_scan(file_path, api_key)
        elif choice == "3":
            file_path = input("\n[Metadata] Enter file path: ").strip()
            if not file_path:
                print_result("[Metadata] No file path provided. Please try again.", "error")
                continue
            if not os.path.isfile(file_path):
                print_result(f"[Metadata] File not found: {file_path}", "error")
                continue
            exif_choice = input("[Metadata] Use ExifTool? (yes/no/auto): ").strip().lower()
            if exif_choice in ["yes", "y", "true", "1"]:
                extract_metadata(file_path, use_exiftool=True)
            elif exif_choice in ["no", "n", "false", "0"]:
                extract_metadata(file_path, use_exiftool=False)
            else:
                # Auto: try exiftool, fallback to python-magic
                try:
                    extract_metadata(file_path, use_exiftool=True)
                except Exception:
                    extract_metadata(file_path, use_exiftool=False)
        elif choice == "4":
            print_result(f"[Log Monitor] Monitoring {log_file}...", "info", log=False)
            tail_log(log_file)
        elif choice == "5":
            file_path = input("\n[Investigation] Enter suspicious file path: ").strip()
            if not file_path or not os.path.isfile(file_path):
                print_result("[Investigation] File not found.", "error")
                continue
            investigate_file(file_path)
        elif choice == "6":
            print_result("[Rule Management] Options:", "info")
            print_result("[1] Update rules from central repo", "info")
            print_result("[2] Validate all rules", "info")
            print_result("[3] Redeploy rules to endpoints (manual)", "info")
            sub_choice = input("Select option (1-3): ").strip()
            if sub_choice == "1":
                update_rules()
            elif sub_choice == "2":
                validate_rules()
            elif sub_choice == "3":
                redeploy_rules()
            else:
                print_result("Invalid rule management option.", "error")
        elif choice == "7":
            print_result("Exiting. Stay safe, hacker!", "success")
            break
        else:
            print_result("Invalid choice. Please enter a number between 1 and 7.", "error")

        time.sleep(0.5)
