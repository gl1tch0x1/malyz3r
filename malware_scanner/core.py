

import yara
import os
import hashlib
import pefile
from malware_scanner.utils import print_result

RULES_DIR = os.path.join(os.path.dirname(__file__), "rules")

def compile_yara_rules():
    """Compile all YARA rules in the rules directory."""
    rule_files = [f for f in os.listdir(RULES_DIR) if f.endswith(".yar")]
    rules = {}
    for rule_file in rule_files:
        path = os.path.join(RULES_DIR, rule_file)
        try:
            rules[rule_file] = yara.compile(filepath=path)
        except yara.SyntaxError as e:
            print_result(f"YARA syntax error in {rule_file}: {e}", "error")
    return rules

def hash_file(file_path):
    """Return SHA256 hash of a file."""
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def check_digital_signature(file_path):
    """Check for digital signature (PE/EXE/ELF/Mach-O). Returns True if signed, False otherwise."""
    try:
        pe = pefile.PE(file_path)
        return hasattr(pe, 'DIRECTORY_ENTRY_SECURITY')
    except Exception:
        return False

def scan_with_yara(file_path, show_signature=False):
    if not os.path.exists(file_path):
        print_result("File does not exist!", "error")
        return

    print_result(f"[*] Scanning file: {file_path}", "info")
    rules = compile_yara_rules()
    matched = False
    for rule_name, rule in rules.items():
        try:
            matches = rule.match(file_path)
        except Exception as e:
            print_result(f"Error scanning with {rule_name}: {e}", "error")
            continue
        if matches:
            matched = True
            print_result(f"[!] Threat detected by {rule_name}:", "danger")
            for match in matches:
                print_result(f"    Rule: {match.rule}", "danger")

    file_hash = hash_file(file_path)
    print_result(f"SHA256 Hash: {file_hash}", "info")

    if show_signature:
        sig = check_digital_signature(file_path)
        if sig is None:
            print_result("pefile not installed: cannot check digital signature.", "error")
        elif sig:
            print_result("Digital Signature: Present", "info")
        else:
            print_result("Digital Signature: Not found", "info")

    if not matched:
        print_result("No YARA threats detected.", "success")
